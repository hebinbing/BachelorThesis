// Generated by gencpp from file window_node/WinSetMsg.msg
// DO NOT EDIT!


#ifndef WINDOW_NODE_MESSAGE_WINSETMSG_H
#define WINDOW_NODE_MESSAGE_WINSETMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace window_node
{
template <class ContainerAllocator>
struct WinSetMsg_
{
  typedef WinSetMsg_<ContainerAllocator> Type;

  WinSetMsg_()
    : data(0)
    , vmin(0)
    , vmax(0)
    , smin(0)
    , erosion_element(0)
    , erosion_kernel(0)
    , dilation_element(0)
    , dilation_kernel(0)
    , mode(false)
    , hist_17(false)
    , hist_18(false)
    , hist_19(false)
    , hist_20(false)
    , hist_21(false)
    , hist_22(false)
    , swich(0)
    , rst(false)  {
    }
  WinSetMsg_(const ContainerAllocator& _alloc)
    : data(0)
    , vmin(0)
    , vmax(0)
    , smin(0)
    , erosion_element(0)
    , erosion_kernel(0)
    , dilation_element(0)
    , dilation_kernel(0)
    , mode(false)
    , hist_17(false)
    , hist_18(false)
    , hist_19(false)
    , hist_20(false)
    , hist_21(false)
    , hist_22(false)
    , swich(0)
    , rst(false)  {
  (void)_alloc;
    }



   typedef int16_t _data_type;
  _data_type data;

   typedef int16_t _vmin_type;
  _vmin_type vmin;

   typedef int16_t _vmax_type;
  _vmax_type vmax;

   typedef int16_t _smin_type;
  _smin_type smin;

   typedef int16_t _erosion_element_type;
  _erosion_element_type erosion_element;

   typedef int16_t _erosion_kernel_type;
  _erosion_kernel_type erosion_kernel;

   typedef int16_t _dilation_element_type;
  _dilation_element_type dilation_element;

   typedef int16_t _dilation_kernel_type;
  _dilation_kernel_type dilation_kernel;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef uint8_t _hist_17_type;
  _hist_17_type hist_17;

   typedef uint8_t _hist_18_type;
  _hist_18_type hist_18;

   typedef uint8_t _hist_19_type;
  _hist_19_type hist_19;

   typedef uint8_t _hist_20_type;
  _hist_20_type hist_20;

   typedef uint8_t _hist_21_type;
  _hist_21_type hist_21;

   typedef uint8_t _hist_22_type;
  _hist_22_type hist_22;

   typedef int16_t _swich_type;
  _swich_type swich;

   typedef uint8_t _rst_type;
  _rst_type rst;





  typedef boost::shared_ptr< ::window_node::WinSetMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::window_node::WinSetMsg_<ContainerAllocator> const> ConstPtr;

}; // struct WinSetMsg_

typedef ::window_node::WinSetMsg_<std::allocator<void> > WinSetMsg;

typedef boost::shared_ptr< ::window_node::WinSetMsg > WinSetMsgPtr;
typedef boost::shared_ptr< ::window_node::WinSetMsg const> WinSetMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::window_node::WinSetMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::window_node::WinSetMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace window_node

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'window_node': ['/home/hossein/catkin_ws/src/window_node/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::window_node::WinSetMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::window_node::WinSetMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::window_node::WinSetMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::window_node::WinSetMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::window_node::WinSetMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::window_node::WinSetMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::window_node::WinSetMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "894b53f7dd2b583012a43d0582ef5f5a";
  }

  static const char* value(const ::window_node::WinSetMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x894b53f7dd2b5830ULL;
  static const uint64_t static_value2 = 0x12a43d0582ef5f5aULL;
};

template<class ContainerAllocator>
struct DataType< ::window_node::WinSetMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "window_node/WinSetMsg";
  }

  static const char* value(const ::window_node::WinSetMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::window_node::WinSetMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 data\n\
int16 vmin\n\
int16 vmax\n\
int16 smin\n\
int16 erosion_element\n\
int16 erosion_kernel\n\
int16 dilation_element\n\
int16 dilation_kernel\n\
bool mode\n\
bool hist_17\n\
bool hist_18\n\
bool hist_19\n\
bool hist_20\n\
bool hist_21\n\
bool hist_22\n\
int16 swich\n\
bool rst\n\
";
  }

  static const char* value(const ::window_node::WinSetMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::window_node::WinSetMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.vmin);
      stream.next(m.vmax);
      stream.next(m.smin);
      stream.next(m.erosion_element);
      stream.next(m.erosion_kernel);
      stream.next(m.dilation_element);
      stream.next(m.dilation_kernel);
      stream.next(m.mode);
      stream.next(m.hist_17);
      stream.next(m.hist_18);
      stream.next(m.hist_19);
      stream.next(m.hist_20);
      stream.next(m.hist_21);
      stream.next(m.hist_22);
      stream.next(m.swich);
      stream.next(m.rst);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WinSetMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::window_node::WinSetMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::window_node::WinSetMsg_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    Printer<int16_t>::stream(s, indent + "  ", v.data);
    s << indent << "vmin: ";
    Printer<int16_t>::stream(s, indent + "  ", v.vmin);
    s << indent << "vmax: ";
    Printer<int16_t>::stream(s, indent + "  ", v.vmax);
    s << indent << "smin: ";
    Printer<int16_t>::stream(s, indent + "  ", v.smin);
    s << indent << "erosion_element: ";
    Printer<int16_t>::stream(s, indent + "  ", v.erosion_element);
    s << indent << "erosion_kernel: ";
    Printer<int16_t>::stream(s, indent + "  ", v.erosion_kernel);
    s << indent << "dilation_element: ";
    Printer<int16_t>::stream(s, indent + "  ", v.dilation_element);
    s << indent << "dilation_kernel: ";
    Printer<int16_t>::stream(s, indent + "  ", v.dilation_kernel);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "hist_17: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hist_17);
    s << indent << "hist_18: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hist_18);
    s << indent << "hist_19: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hist_19);
    s << indent << "hist_20: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hist_20);
    s << indent << "hist_21: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hist_21);
    s << indent << "hist_22: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hist_22);
    s << indent << "swich: ";
    Printer<int16_t>::stream(s, indent + "  ", v.swich);
    s << indent << "rst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rst);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WINDOW_NODE_MESSAGE_WINSETMSG_H
