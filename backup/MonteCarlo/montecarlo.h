#ifndef MONTECARLO_H
#define MONTECARLO_H

#include <math.h>
#include <random>
#include <QDebug>
#include <time.h>
class MonteCarlo
{
public:
    MonteCarlo();
    float points[28][3]={{2.6,3,1.2},{2.8,1.2,0.7},{1.7,1.9,1.7},{1,2.9,-2},{0.4,1.2,0.3},//badi 5
                         {1.3,0.8,-0.9},{2.9,0,1},{1.7,-0.7,-2},{2.7,-2,-0.5},{2.8,-4,0.6} //badi10
                         ,{2.2,-3.2,2.5},{0.7,-0.8,0.5},{1,-2.2,-0.3},{0,-3.2,-3},{-0.7,-1.8,2.9},//badi15
                         {0,0,-0.7},{1.5,-4,1.7},{-1.5,-2,-0.9},{-1.2,-0.8,-2.2},{-0.8,0.8,0.8},//badi20
                         {-0.6,1.5,2.5},{-1.2,3,1},{-2,2.7,1.9},{-1.5,1.2,-2},{-1.9,0.1,-3},//badi25
                         {-1.5,-3.5,3},{-0.5,2.5,0.2},{-1,3,0.9}};
    float randNum[500];

    int edges[28][28]={
        {0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
        {0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,0,0,1,0},
        {0,1,1,0,1,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,1,1,0,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,1,0,1,0,0,0,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,1,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,1,0,0,0,0,0,0,1,0,0},
        {0,0,0,0,1,1,0,1,0,0,0,1,0,0,1,0,0,0,1,1,1,0,0,1,1,0,0,0},
        {0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,1,0,1,0,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,1,0,1,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,1,1,0,1,1},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,1},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,1,0,1,1},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0}
    };

    float obstacles[6][3]={{-1.14,-3.3,0.65},{-0.28,-2.84,0.8},{0.01,-2,0.8},{-0.14,1.8,0.8},{1.96,1.7,0.7},{-1.76,1.9,0.35}};

    struct Vertics{
        float x;
        float y;
        float theta;
    };

    struct Edge{
        float time;
        float probability;
    };
    struct Command{
        float v;
        float w;
    };

    float deltaT=0.3;
    float Vnoise;
    float Wnoise;
    float etaV=0.04;
    float etaW=0.04;
    int DFL_tracker(Vertics start, Vertics goal);
    Vertics realInnerStateGenerator(Vertics start, Command action);
    Vertics belifeInnerStateGenerator(Vertics start, Command action);

    int checkCollision(Vertics belife);
};

#endif // MONTECARLO_H
