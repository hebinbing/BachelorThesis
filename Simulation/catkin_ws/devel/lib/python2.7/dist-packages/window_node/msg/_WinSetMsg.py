# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from window_node/WinSetMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class WinSetMsg(genpy.Message):
  _md5sum = "894b53f7dd2b583012a43d0582ef5f5a"
  _type = "window_node/WinSetMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 data
int16 vmin
int16 vmax
int16 smin
int16 erosion_element
int16 erosion_kernel
int16 dilation_element
int16 dilation_kernel
bool mode
bool hist_17
bool hist_18
bool hist_19
bool hist_20
bool hist_21
bool hist_22
int16 swich
bool rst
"""
  __slots__ = ['data','vmin','vmax','smin','erosion_element','erosion_kernel','dilation_element','dilation_kernel','mode','hist_17','hist_18','hist_19','hist_20','hist_21','hist_22','swich','rst']
  _slot_types = ['int16','int16','int16','int16','int16','int16','int16','int16','bool','bool','bool','bool','bool','bool','bool','int16','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       data,vmin,vmax,smin,erosion_element,erosion_kernel,dilation_element,dilation_kernel,mode,hist_17,hist_18,hist_19,hist_20,hist_21,hist_22,swich,rst

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WinSetMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.data is None:
        self.data = 0
      if self.vmin is None:
        self.vmin = 0
      if self.vmax is None:
        self.vmax = 0
      if self.smin is None:
        self.smin = 0
      if self.erosion_element is None:
        self.erosion_element = 0
      if self.erosion_kernel is None:
        self.erosion_kernel = 0
      if self.dilation_element is None:
        self.dilation_element = 0
      if self.dilation_kernel is None:
        self.dilation_kernel = 0
      if self.mode is None:
        self.mode = False
      if self.hist_17 is None:
        self.hist_17 = False
      if self.hist_18 is None:
        self.hist_18 = False
      if self.hist_19 is None:
        self.hist_19 = False
      if self.hist_20 is None:
        self.hist_20 = False
      if self.hist_21 is None:
        self.hist_21 = False
      if self.hist_22 is None:
        self.hist_22 = False
      if self.swich is None:
        self.swich = 0
      if self.rst is None:
        self.rst = False
    else:
      self.data = 0
      self.vmin = 0
      self.vmax = 0
      self.smin = 0
      self.erosion_element = 0
      self.erosion_kernel = 0
      self.dilation_element = 0
      self.dilation_kernel = 0
      self.mode = False
      self.hist_17 = False
      self.hist_18 = False
      self.hist_19 = False
      self.hist_20 = False
      self.hist_21 = False
      self.hist_22 = False
      self.swich = 0
      self.rst = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8h7BhB().pack(_x.data, _x.vmin, _x.vmax, _x.smin, _x.erosion_element, _x.erosion_kernel, _x.dilation_element, _x.dilation_kernel, _x.mode, _x.hist_17, _x.hist_18, _x.hist_19, _x.hist_20, _x.hist_21, _x.hist_22, _x.swich, _x.rst))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.data, _x.vmin, _x.vmax, _x.smin, _x.erosion_element, _x.erosion_kernel, _x.dilation_element, _x.dilation_kernel, _x.mode, _x.hist_17, _x.hist_18, _x.hist_19, _x.hist_20, _x.hist_21, _x.hist_22, _x.swich, _x.rst,) = _get_struct_8h7BhB().unpack(str[start:end])
      self.mode = bool(self.mode)
      self.hist_17 = bool(self.hist_17)
      self.hist_18 = bool(self.hist_18)
      self.hist_19 = bool(self.hist_19)
      self.hist_20 = bool(self.hist_20)
      self.hist_21 = bool(self.hist_21)
      self.hist_22 = bool(self.hist_22)
      self.rst = bool(self.rst)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8h7BhB().pack(_x.data, _x.vmin, _x.vmax, _x.smin, _x.erosion_element, _x.erosion_kernel, _x.dilation_element, _x.dilation_kernel, _x.mode, _x.hist_17, _x.hist_18, _x.hist_19, _x.hist_20, _x.hist_21, _x.hist_22, _x.swich, _x.rst))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.data, _x.vmin, _x.vmax, _x.smin, _x.erosion_element, _x.erosion_kernel, _x.dilation_element, _x.dilation_kernel, _x.mode, _x.hist_17, _x.hist_18, _x.hist_19, _x.hist_20, _x.hist_21, _x.hist_22, _x.swich, _x.rst,) = _get_struct_8h7BhB().unpack(str[start:end])
      self.mode = bool(self.mode)
      self.hist_17 = bool(self.hist_17)
      self.hist_18 = bool(self.hist_18)
      self.hist_19 = bool(self.hist_19)
      self.hist_20 = bool(self.hist_20)
      self.hist_21 = bool(self.hist_21)
      self.hist_22 = bool(self.hist_22)
      self.rst = bool(self.rst)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8h7BhB = None
def _get_struct_8h7BhB():
    global _struct_8h7BhB
    if _struct_8h7BhB is None:
        _struct_8h7BhB = struct.Struct("<8h7BhB")
    return _struct_8h7BhB
